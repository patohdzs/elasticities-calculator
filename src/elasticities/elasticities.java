/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package elasticities;

/**
 *
 * @author patricioh
 */
public class elasticities extends javax.swing.JFrame {

    /**
     * Creates new form elasticities
     */
    public elasticities() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        elasticity = new javax.swing.JComboBox<>();
        P1 = new javax.swing.JTextField();
        P2 = new javax.swing.JTextField();
        Q1 = new javax.swing.JTextField();
        Q2 = new javax.swing.JTextField();
        changeinq = new javax.swing.JTextField();
        changeinp = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        answer = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        equation = new javax.swing.JTextField();
        status = new javax.swing.JTextField();
        type = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        elasticity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PED", "XED", "YED", "PES" }));
        elasticity.setToolTipText("");
        elasticity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                elasticityActionPerformed(evt);
            }
        });

        P1.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        P1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        P1.setText("P1");
        P1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                P1ActionPerformed(evt);
            }
        });

        P2.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        P2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        P2.setText("P2");

        Q1.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        Q1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Q1.setText("Q1");

        Q2.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        Q2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Q2.setText("Q2");

        changeinq.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        changeinq.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        changeinq.setText("%Change in Quantity");

        changeinp.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        changeinp.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        changeinp.setText("%Change in Price");

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel1.setText("Elasticity Calculator");

        answer.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        answer.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        answer.setText("Answer");

        jButton1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jButton1.setText("Calculate");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        equation.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        equation.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        equation.setText("Equation of the curve");

        status.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        status.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        status.setText("Elastic/Inelastic");

        type.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        type.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        type.setText("Type of good/service");

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 16)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("INPUTS:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(113, 113, 113))
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(elasticity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(P1)
                                    .addComponent(Q1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(P2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Q2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(answer, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(changeinp)
                            .addComponent(changeinq, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                            .addComponent(equation, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jButton1)
                    .addComponent(elasticity, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(P2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(P1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(changeinp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Q2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(changeinq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Q1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(answer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(equation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void elasticityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_elasticityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_elasticityActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        Object method;
        float p1=Integer.parseInt(P1.getText());
        float p2=Integer.parseInt(P2.getText());
        float q1=Integer.parseInt(Q1.getText());
        float q2=Integer.parseInt(Q2.getText());
        float DeltaP;
        float DeltaQ;
        float ans;
        float gradient;
        float xinter;
        
        
        method= elasticity.getSelectedItem().toString();
        
        if(method=="PED"){
            // Elasticity calculation
            DeltaP= ((p2-p1)/p1)*100;
            DeltaP= Math.round(DeltaP*100);
            DeltaP=DeltaP/100;
            changeinp.setText("change in price is "+ Float.toString(DeltaP)+"%");
            
            DeltaQ= ((q2-q1)/q1)*100;
            DeltaQ= Math.round(DeltaQ*100);
            DeltaQ=DeltaQ/100;
            changeinq.setText("change in quantity is "+ Float.toString(DeltaQ)+"%");
            
            ans= (DeltaQ/DeltaP);
            ans=Math.round(ans*100);
            ans=Math.negateExact((int)ans);
            ans=ans/100;
            answer.setText("PED="+Float.toString(ans));
           
            // Function of the curve calculation
            gradient= (q2-q1)/(p2-p1);
            gradient= Math.round(gradient*100);
            gradient=gradient/100;
           
            xinter= q1-(gradient*p1);
           
            equation.setText("Qd="+Float.toString(gradient)+"P+"+Float.toString(xinter));
            
             // Elasticity status
            if (ans>1){
               status.setText("Elastic");
           }
           else if(ans<1 & ans>0){
               status.setText("Inelastic");
           }
           else if(ans==1){
               status.setText("Unitary Elastic");
           }
           else if(ans==0){
               status.setText("Perfectly Inelastic");
           }
           // Type of good
           type.setText("-");
            
        }
        else if(method=="XED"){
        // Elasticity Calculation
        DeltaP= ((p2-p1)/p1)*100;
        DeltaP= Math.round(DeltaP*100);
        DeltaP=DeltaP/100;
        changeinp.setText("change in price: "+ Float.toString(DeltaP)+"%");
            
        DeltaQ= ((q2-q1)/q1)*100;
        DeltaQ= Math.round(DeltaQ*100);
        DeltaQ=DeltaQ/100;
        changeinq.setText("change in quantity: "+ Float.toString(DeltaQ)+"%");
            
        ans= (DeltaQ/DeltaP);
        ans= Math.round(ans*100);
        ans=(ans/100);
        answer.setText("XED="+Float.toString(ans));
        
        // Function Calculation
        equation.setText("-");
        
        // Type of good
        if (ans>0){
        type.setText("Subtitute");
        } 
        else if (ans<0){
        type.setText("Compliement");
        }
        else if (ans==0) {
        type.setText("Goods are unrelated");
        }
        }
        
        else if(method=="YED"){
        // Elasticity Calculation
        DeltaP= ((p2-p1)/p1)*100;
        DeltaP= Math.round(DeltaP*100);
        DeltaP=DeltaP/100;
        changeinp.setText("change in price is "+ Float.toString(DeltaP)+"%");
          
        DeltaQ= ((q2-q1)/q1)*100;
        DeltaQ= Math.round(DeltaQ*100);
        DeltaQ=DeltaQ/100;
        changeinq.setText("change in quantity is "+ Float.toString(DeltaQ)+"%");
            
        ans= (DeltaQ/DeltaP);
        ans=Math.round(ans*100);
        ans=Math.negateExact((int)ans);
        ans=ans/100;
        answer.setText("PED="+Float.toString(ans));
           
        // Function Calculation
        equation.setText("-");
        
        // Type of good
        if (ans>0 & ans<1){
        type.setText("Necessary good");
        } 
        else if (ans>1){
        type.setText("Luxury good");
        }
        else if (ans<0){
        type.setText("Inferior good");
        }
        else if (ans==0) {
        type.setText("No relationship");
        }
        
        }
        else if(method=="PES"){
            
            // Elasticity calculation
            DeltaP= ((p2-p1)/p1)*100;
            DeltaP= Math.round(DeltaP*100);
            DeltaP=DeltaP/100;
            changeinp.setText("change in price: "+ Float.toString(DeltaP)+"%");
            
            DeltaQ= ((q2-q1)/q1)*100;
            DeltaQ= Math.round(DeltaQ*100);
            DeltaQ=DeltaQ/100;
            changeinq.setText("change in quantity: "+ Float.toString(DeltaQ)+"%");
            
            ans= (DeltaQ/DeltaP);
            ans= Math.round(ans*100);
            ans=(ans/100);
            answer.setText("PES="+Float.toString(ans));
            
            // Function of the curve calculation
           gradient= (q2-q1)/(p2-p1);
           gradient= Math.round(gradient*100);
           gradient=gradient/100;
           
           xinter= q1-(gradient*p1);
           
           equation.setText("Qs= "+Float.toString(gradient)+"P + "+Float.toString(xinter));
           
           // Elasticity status
           if (ans>1){
               status.setText("Elastic");
           }
           else if(ans<1 & ans>0){
               status.setText("Inelastic");
           }
           else if(ans==1){
               status.setText("Unitary Elastic");
           }
           else if(ans==0){
               status.setText("Perfectly Inelastic");
           }
           // Type of good
           type.setText("-");
        
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void P1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_P1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_P1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(elasticities.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(elasticities.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(elasticities.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(elasticities.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new elasticities().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField P1;
    private javax.swing.JTextField P2;
    private javax.swing.JTextField Q1;
    private javax.swing.JTextField Q2;
    private javax.swing.JTextField answer;
    private javax.swing.JTextField changeinp;
    private javax.swing.JTextField changeinq;
    private javax.swing.JComboBox<String> elasticity;
    private javax.swing.JTextField equation;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField status;
    private javax.swing.JTextField type;
    // End of variables declaration//GEN-END:variables
}
